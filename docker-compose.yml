services:
  # PG Amin for PostgreSQL management
  pgadmin:
    image: dpage/pgadmin4:latest
    environment:
      PGADMIN_DEFAULT_EMAIL: admin@dinokage.in
      PGADMIN_DEFAULT_PASSWORD: Pressword@69
    ports:
      - "5050:80"
# Database
  postgres:
    image: postgres:15
    environment:
      POSTGRES_DB: edms
      POSTGRES_USER: admin
      POSTGRES_PASSWORD: password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./shared/database/init.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U admin -d edms"]
      interval: 10s
      timeout: 5s
      retries: 5

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and pub/sub
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5

  # API Gateway
  api-gateway:
    build:
      context: ./services/api-gateway
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - AUTH_SERVICE_URL=http://auth-service:3001
      - DOCUMENT_SERVICE_URL=http://document-service:3002
      - VERSION_CONTROL_SERVICE_URL=http://version-control-service:3008
      - WORKFLOW_SERVICE_URL=http://workflow-service:3003
      - SEARCH_SERVICE_URL=http://search-service:3004
      - NOTIFICATION_SERVICE_URL=http://notification-service:3005
      - AUDIT_SERVICE_URL=http://audit-service:3006
      - REPORTING_SERVICE_URL=http://reporting-service:3007
      - REDIS_URL=redis://redis:6379
    depends_on:
      - redis
      - auth-service
      - document-service
      - version-control-service
      - workflow-service
      - search-service
      - notification-service
      - audit-service
      - reporting-service
    restart: unless-stopped

  # Authentication Service
  auth-service:
    build:
      context: ./services/auth-service
      dockerfile: Dockerfile
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - PORT=3001
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=edms
      - DB_USER=admin
      - DB_PASSWORD=password
      - JWT_SECRET=your-super-secret-jwt-key-change-this-in-production
      - JWT_EXPIRES_IN=24h
    depends_on:
      - postgres
    restart: unless-stopped

  # Document Service
  document-service:
    build:
      context: ./services/document-service
      dockerfile: Dockerfile
    ports:
      - "3002:3002"
    environment:
      - NODE_ENV=development
      - PORT=3002
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=edms
      - DB_USER=admin
      - DB_PASSWORD=password
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_USE_SSL=false
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET=edms-documents
    depends_on:
      - postgres
      - minio
    restart: unless-stopped

  # Version Control Service
  version-control-service:
    build:
      context: ./services/version-control-service
      dockerfile: Dockerfile
    ports:
      - "3008:3008"
    environment:
      - NODE_ENV=development
      - PORT=3008
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=edms
      - DB_USER=admin
      - DB_PASSWORD=password
      - MINIO_ENDPOINT=minio
      - MINIO_PORT=9000
      - MINIO_USE_SSL=false
      - MINIO_ACCESS_KEY=minioadmin
      - MINIO_SECRET_KEY=minioadmin123
      - MINIO_BUCKET=edms-documents
    depends_on:
      - postgres
      - minio
    restart: unless-stopped

  # Workflow Service
  workflow-service:
    build:
      context: ./services/workflow-service
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - NODE_ENV=development
      - PORT=3003
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=edms
      - DB_USER=admin
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Search Service
  search-service:
    build:
      context: ./services/search-service
      dockerfile: Dockerfile
    ports:
      - "3004:3004"
    environment:
      - NODE_ENV=development
      - PORT=3004
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=edms
      - DB_USER=admin
      - DB_PASSWORD=password
    depends_on:
      - postgres
    restart: unless-stopped

  # Notification Service
  notification-service:
    build:
      context: ./services/notification-service
      dockerfile: Dockerfile
    ports:
      - "3005:3005"
    environment:
      - NODE_ENV=development
      - PORT=3005
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=edms
      - DB_USER=admin
      - DB_PASSWORD=password
      - REDIS_URL=redis://redis:6379
      - SMTP_HOST=smtp.gmail.com
      - SMTP_PORT=587
      - SMTP_USER=your-email@gmail.com
      - SMTP_PASS=your-app-password
    depends_on:
      - postgres
      - redis
    restart: unless-stopped

  # Audit Service
  audit-service:
    build:
      context: ./services/audit-service
      dockerfile: Dockerfile
    ports:
      - "3006:3006"
    environment:
      - NODE_ENV=development
      - PORT=3006
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=edms
      - DB_USER=admin
      - DB_PASSWORD=password
    depends_on:
      - postgres
    restart: unless-stopped

  # Reporting Service
  reporting-service:
    build:
      context: ./services/reporting-service
      dockerfile: Dockerfile
    ports:
      - "3007:3007"
    environment:
      - NODE_ENV=development
      - PORT=3007
      - DB_HOST=postgres
      - DB_PORT=5432
      - DB_NAME=edms
      - DB_USER=admin
      - DB_PASSWORD=password
    depends_on:
      - postgres
    restart: unless-stopped

volumes:
  postgres_data:
  minio_data:
  redis_data:

networks:
  default:
    driver: bridge